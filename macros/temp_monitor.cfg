[gcode_macro BEACON_MODEL_SAVE_TO]
description: 0: default 1:energetixtex 2:energetixsmo 3:vzbottex 4:vzbotsmo
gcode:
  {% set energetixtex = params.ENERGETIXTEX|default(0)|int %}
  {% set energetixsmo = params.ENERGETIXSMO|default(0)|int %}
  {% set vzbottex = params.VZBOTTEX|default(0)|int %}
  {% set vzbotsmo = params.VZBOTSMO|default(0)|int %}
  {% set save = 1|int %}
  
  {% if (energetixtex==1) %}
        #BEACON_MODEL_SELECT NAME=energetixtex
        BEACON_MODEL_SAVE NAME=energetixtex
        #M118 0
  {% elif (energetixsmo==1) %}     
        #BEACON_MODEL_SELECT NAME=energetixsmo
        BEACON_MODEL_SAVE NAME=energetixsmo
        #M118 1
  {% elif (vzbottex==1) %}     
        #BEACON_MODEL_SELECT NAME=vzbottex
        BEACON_MODEL_SAVE NAME=vzbottex
        #M118 2
  {% elif (vzbotsmo==1) %}     
        #BEACON_MODEL_SELECT NAME=vzbotsmo
        BEACON_MODEL_SAVE NAME=vzbotsmo
        #M118 3
  #{% elif (model==4) %}     
  #      BEACON_MODEL_SELECT NAME=evzbotsmo
        #BEACON_MODEL_SAVE NAME=default
        #M118 4
  {% else %}
    M118 No correct selection #debug 
  {% endif %}
  
  BEACON_MODEL_LIST
  
  {% if (save==1) %}
        SAVE_CONFIG
        #M118 Consider Save Config to Save Actual Model
  {% endif %}
  #M118 Consider Save Config to Save Actual Model

[gcode_macro BEACON_MODEL_LOAD]
description: 0: default 1:energetixtex 2:energetixsmo 3:vzbottex 4:vzbotsmo
gcode:
  {% set energetixtex = params.ENERGETIXTEX|default(0)|int %}
  {% set energetixsmo = params.ENERGETIXSMO|default(0)|int %}
  {% set vzbottex = params.VZBOTTEX|default(0)|int %}
  {% set vzbotsmo = params.VZBOTSMO|default(0)|int %}
  #{% set save = params.SAVE|default(0)|int %}
  {% set save = 1|int %}
  
  {% if (energetixtex==1) %}
        BEACON_MODEL_SELECT NAME=energetixtex
        BEACON_MODEL_SAVE NAME=default
        #M118 0
  {% elif (energetixsmo==1) %}     
        BEACON_MODEL_SELECT NAME=energetixsmo
        BEACON_MODEL_SAVE NAME=default
        #M118 1
  {% elif (vzbottex==1) %}     
        BEACON_MODEL_SELECT NAME=vzbottex
        BEACON_MODEL_SAVE NAME=default
        #M118 2
  {% elif (vzbotsmo==1) %}     
        BEACON_MODEL_SELECT NAME=vzbotsmo
        BEACON_MODEL_SAVE NAME=default
        #M118 3
  #{% elif (model==4) %}     
  #      BEACON_MODEL_SELECT NAME=evzbotsmo
        #BEACON_MODEL_SAVE NAME=default
        #M118 4
  {% else %}
    M118 No correct selection #debug 
  {% endif %}
  
  BEACON_MODEL_LIST
  
  {% if (save==1) %}
        SAVE_CONFIG
        #M118 Consider Save Config to Save Actual Model
  {% endif %}
  #M118 Consider Save Config to Save Actual Model

# Monitoring loop. Begins at Klipper start.
[delayed_gcode CHECK_ALL_FANS]
initial_duration: 5
gcode:
    TEMPS_CHECK
    UPDATE_DELAYED_GCODE ID=CHECK_ALL_FANS DURATION=10

[gcode_macro TEMPS_CHECK]
variable_active: 0
gcode:
    #{% set head_temp_on = 50|float %} #handled in dummy_hotend_fan
    #{% set temp_head = printer[printer.toolhead.extruder].temperature|float %} #handled in dummy_hotend_fan
    {% set drivers_temp_on = 33|float %} #max drivers temperature by HALT handled in [temperature_sensor drivers_temp] later rework to pause??
    {% set drivers_temp_off = 28|float %} ##hysteresis for driver temps
    {% set temp_drivers = printer['temperature_sensor drivers_temp'].temperature|float %}
    {% set fan_controller_speed = printer['controller_fan dummy_motors_fan'].speed|float  %}
    {% set fan_hotend_speed = printer['heater_fan dummy_hotend_fan'].speed|float  %}

    #debug print into console
    #{action_respond_info("Active cnt: %.1f, Drivers Temp: %.1f, Fan_controller: %.1f, Fan_hotend: %.1f" % (active, temp_drivers, fan_controller_speed, fan_hotend_speed))}

    {% if ((temp_drivers >= drivers_temp_on) or (fan_controller_speed>0) or (fan_hotend_speed>0)) and (active==0) %}
        SET_GCODE_VARIABLE MACRO=TEMPS_CHECK VARIABLE=active VALUE=1
        WATER_COOLING_ON
    {% elif (temp_drivers <= drivers_temp_off) and (fan_controller_speed==0) and (fan_hotend_speed==0) and (active==1) %} #hysteresis for driver temps     
        SET_GCODE_VARIABLE MACRO=TEMPS_CHECK VARIABLE=active VALUE=0
        WATER_COOLING_OFF
    {% else %}
    #M118 Nothing from above #debug 
    {% endif %}
      
[gcode_macro WATER_COOLING_ON]
gcode:
  SET_FAN_SPEED FAN=water_pump SPEED=0.52
  SET_FAN_SPEED FAN=radiator_fan SPEED=1
  M118 START Watercooling                  #debug print
  
[gcode_macro WATER_COOLING_OFF]
gcode:
  SET_FAN_SPEED FAN=water_pump SPEED=0
  SET_FAN_SPEED FAN=radiator_fan SPEED=0
  M118 END Watercooling                    #debug print

[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}

#[temperature_sensor motor_xy]  #optional for chamber temp
#sensor_type: NTC 100K MGB18-104F39050L32
#pullup_resistor: 4700
#sensor_pin: PF9
#min_temp: 0
#max_temp: 100
#gcode_id: C: C



# Monitoring loop. Begins at Klipper start.
#[delayed_gcode CHECK_ALL_FANS]
#initial_duration: 1
#gcode:
#    HOTEND_FAN_CHECK
#    UPDATE_DELAYED_GCODE ID=CHECK_ALL_FANS DURATION=3

# Change min_rpm and max_consecutive_stops to your desired values.
#[gcode_macro HOTEND_FAN_CHECK]
#variable_he_stop_count: 0
#gcode:
#    {% set min_rpm = 3000|float %}
#    {% set max_consecutive_stops = 3 %}
#    {% set rpm = printer['heater_fan hotend_fan'].rpm|float %}
#    {% set he_target = printer[printer.toolhead.extruder].target|float %}
#    {% set he_temp = printer[printer.toolhead.extruder].temperature|float %}
#    {% set fan_on_temp = printer.configfile.settings['heater_fan hotend_fan'].heater_temp|float %}
#    {% set he_stop_count = printer["gcode_macro HOTEND_FAN_CHECK"].he_stop_count|int %}
#
#    {% if (he_target >= fan_on_temp) and (rpm < min_rpm) and (he_temp >= fan_on_temp) %}
#        SET_GCODE_VARIABLE MACRO=HOTEND_FAN_CHECK VARIABLE=he_stop_count VALUE={he_stop_count + 1}
#        M118 WARNING: Fan stoppage detected ({he_stop_count+1}/{max_consecutive_stops}).
#        M400
#        {% if printer["gcode_macro HOTEND_FAN_CHECK"].he_stop_count|int >= max_consecutive_stops-1 %}
#            FAN_STOPPAGE_ROUTINE
#        {% endif %}
#    {% else %}
#        SET_GCODE_VARIABLE MACRO=HOTEND_FAN_CHECK VARIABLE=he_stop_count VALUE=0
#    {% endif %}