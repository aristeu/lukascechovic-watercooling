# Monitoring loop. Begins at Klipper start.
[delayed_gcode CHECK_ALL_FANS]
initial_duration: 5
gcode:
    TEMPS_CHECK
    UPDATE_DELAYED_GCODE ID=CHECK_ALL_FANS DURATION=10

[gcode_macro TEMPS_CHECK]
variable_active: 0
gcode:
    #{% set head_temp_on = 50|float %} #handled in dummy_hotend_fan
    #{% set temp_head = printer[printer.toolhead.extruder].temperature|float %} #handled in dummy_hotend_fan
    {% set drivers_temp_on = 33|float %} #max drivers temperature by HALT handled in [temperature_sensor drivers_temp] later rework to pause??
    {% set drivers_temp_off = 28|float %} ##hysteresis for driver temps
    {% set temp_drivers = printer['temperature_sensor drivers_temp'].temperature|float %}
    {% set fan_controller_speed = printer['controller_fan dummy_motors_fan'].speed|float  %}
    {% set fan_hotend_speed = printer['heater_fan dummy_hotend_fan'].speed|float  %}

    #debug print into console
    #{action_respond_info("Active cnt: %.1f, Drivers Temp: %.1f, Fan_controller: %.1f, Fan_hotend: %.1f" % (active, temp_drivers, fan_controller_speed, fan_hotend_speed))}

    {% if ((temp_drivers >= drivers_temp_on) or (fan_controller_speed>0) or (fan_hotend_speed>0)) and (active==0) %}
        SET_GCODE_VARIABLE MACRO=TEMPS_CHECK VARIABLE=active VALUE=1
        WATER_COOLING_ON
    {% elif (temp_drivers <= drivers_temp_off) and (fan_controller_speed==0) and (fan_hotend_speed==0) and (active==1) %} #hysteresis for driver temps     
        SET_GCODE_VARIABLE MACRO=TEMPS_CHECK VARIABLE=active VALUE=0
        WATER_COOLING_OFF
    {% else %}
    #M118 Nothing from above #debug 
    {% endif %}
      
[gcode_macro WATER_COOLING_ON]
gcode:
  SET_FAN_SPEED FAN=water_pump SPEED=0.52
  SET_FAN_SPEED FAN=radiator_fan SPEED=1
  M118 START Watercooling                  #debug print
  
[gcode_macro WATER_COOLING_OFF]
gcode:
  SET_FAN_SPEED FAN=water_pump SPEED=0
  SET_FAN_SPEED FAN=radiator_fan SPEED=0
  M118 END Watercooling                    #debug print

